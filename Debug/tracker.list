
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002c48  08002c48  00003c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c8c  08002c8c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c8c  08002c8c  00003c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c94  08002c94  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08002ca8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08002ca8  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bd2  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001865  00000000  00000000  0000bc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052a  00000000  00000000  0000db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d73  00000000  00000000  0000e062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c43  00000000  00000000  00024dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e69  00000000  00000000  0002da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a50  00000000  00000000  000af8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000b1314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c30 	.word	0x08002c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c30 	.word	0x08002c30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb07 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f81d 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8c9 	bl	8000300 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f8a9 	bl	80002c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f853 	bl	800021c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000176:	f000 f87b 	bl	8000270 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Eg_On(700);
 800017a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800017e:	f000 f905 	bl	800038c <Eg_On>
  char cmnd[] = "ATI\r\n";
 8000182:	4a06      	ldr	r2, [pc, #24]	@ (800019c <main+0x40>)
 8000184:	463b      	mov	r3, r7
 8000186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800018a:	6018      	str	r0, [r3, #0]
 800018c:	3304      	adds	r3, #4
 800018e:	8019      	strh	r1, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  SendATCommand_O(cmnd, "OK", 300);
	  SendATCommand(cmnd, "OK");
 8000190:	463b      	mov	r3, r7
 8000192:	4903      	ldr	r1, [pc, #12]	@ (80001a0 <main+0x44>)
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f935 	bl	8000404 <SendATCommand>
 800019a:	e7f9      	b.n	8000190 <main+0x34>
 800019c:	08002c4c 	.word	0x08002c4c
 80001a0:	08002c48 	.word	0x08002c48

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	@ 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	@ 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 fcec 	bl	8002b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 f89c 	bl	8001318 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 f8cb 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fb0a 	bl	800181c <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 f8b7 	bl	8000380 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	@ 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000222:	4a12      	ldr	r2, [pc, #72]	@ (800026c <MX_USART1_UART_Init+0x50>)
 8000224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000226:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800022c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022e:	4b0e      	ldr	r3, [pc, #56]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800023a:	4b0b      	ldr	r3, [pc, #44]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000252:	4805      	ldr	r0, [pc, #20]	@ (8000268 <MX_USART1_UART_Init+0x4c>)
 8000254:	f001 fc70 	bl	8001b38 <HAL_UART_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025e:	f000 f88f 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028
 800026c:	40013800 	.word	0x40013800

08000270 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000274:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 8000276:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <MX_USART3_UART_Init+0x50>)
 8000278:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800027a:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 800027c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000280:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800028e:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 8000296:	220c      	movs	r2, #12
 8000298:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002a6:	4805      	ldr	r0, [pc, #20]	@ (80002bc <MX_USART3_UART_Init+0x4c>)
 80002a8:	f001 fc46 	bl	8001b38 <HAL_UART_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002b2:	f000 f865 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000070 	.word	0x20000070
 80002c0:	40004800 	.word	0x40004800

080002c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_DMA_Init+0x38>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <MX_DMA_Init+0x38>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <MX_DMA_Init+0x38>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	200f      	movs	r0, #15
 80002e8:	f000 fba1 	bl	8000a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002ec:	200f      	movs	r0, #15
 80002ee:	f000 fbba 	bl	8000a66 <HAL_NVIC_EnableIRQ>

}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_GPIO_Init+0x78>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <MX_GPIO_Init+0x78>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_GPIO_Init+0x78>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_GPIO_Init+0x78>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <MX_GPIO_Init+0x78>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_GPIO_Init+0x78>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EG_RST_Pin|EG_PWR_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800034a:	480c      	ldr	r0, [pc, #48]	@ (800037c <MX_GPIO_Init+0x7c>)
 800034c:	f000 ffcc 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EG_RST_Pin EG_PWR_Pin */
  GPIO_InitStruct.Pin = EG_RST_Pin|EG_PWR_Pin;
 8000350:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	@ (800037c <MX_GPIO_Init+0x7c>)
 800036a:	f000 fe39 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <Error_Handler+0x8>

0800038c <Eg_On>:

char DMA_Rx_Buf[AT_BUFFER_LENGTH] = {'\0'} ;
char Loc_Buf[AT_BUFFER_LENGTH] = {'\0'};

void Eg_On(uint32_t TimeOn)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800039a:	480a      	ldr	r0, [pc, #40]	@ (80003c4 <Eg_On+0x38>)
 800039c:	f000 ffa4 	bl	80012e8 <HAL_GPIO_WritePin>
	HAL_Delay(TimeOn);
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f000 fa49 	bl	8000838 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003ac:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <Eg_On+0x38>)
 80003ae:	f000 ff9b 	bl	80012e8 <HAL_GPIO_WritePin>

	HAL_Delay(5000);
 80003b2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003b6:	f000 fa3f 	bl	8000838 <HAL_Delay>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a07      	ldr	r2, [pc, #28]	@ (80003f8 <HAL_UARTEx_RxEventCallback+0x30>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d107      	bne.n	80003ee <HAL_UARTEx_RxEventCallback+0x26>
	{
		 memcpy(Loc_Buf, DMA_Rx_Buf, AT_BUFFER_LENGTH);
 80003de:	4a07      	ldr	r2, [pc, #28]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x34>)
 80003e0:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <HAL_UARTEx_RxEventCallback+0x38>)
 80003e2:	4610      	mov	r0, r2
 80003e4:	4619      	mov	r1, r3
 80003e6:	2380      	movs	r3, #128	@ 0x80
 80003e8:	461a      	mov	r2, r3
 80003ea:	f002 fc13 	bl	8002c14 <memcpy>
	}
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40013800 	.word	0x40013800
 80003fc:	2000017c 	.word	0x2000017c
 8000400:	200000fc 	.word	0x200000fc

08000404 <SendATCommand>:

int SendATCommand(char *cmd, char *response)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 3000);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff fe9c 	bl	800014c <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	4822      	ldr	r0, [pc, #136]	@ (80004a8 <SendATCommand+0xa4>)
 8000420:	f001 fbda 	bl	8001bd8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)DMA_Rx_Buf, sizeof(DMA_Rx_Buf));
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	4921      	ldr	r1, [pc, #132]	@ (80004ac <SendATCommand+0xa8>)
 8000428:	481f      	ldr	r0, [pc, #124]	@ (80004a8 <SendATCommand+0xa4>)
 800042a:	f001 fc60 	bl	8001cee <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800042e:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <SendATCommand+0xac>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <SendATCommand+0xac>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f022 0204 	bic.w	r2, r2, #4
 800043c:	601a      	str	r2, [r3, #0]

    char *ptr = strstr(Loc_Buf, response);
 800043e:	6839      	ldr	r1, [r7, #0]
 8000440:	481c      	ldr	r0, [pc, #112]	@ (80004b4 <SendATCommand+0xb0>)
 8000442:	f002 fbad 	bl	8002ba0 <strstr>
 8000446:	6178      	str	r0, [r7, #20]

        if(dBUG)
        {
        	char *ptr_ok = strstr(Loc_Buf, "OK");
 8000448:	491b      	ldr	r1, [pc, #108]	@ (80004b8 <SendATCommand+0xb4>)
 800044a:	481a      	ldr	r0, [pc, #104]	@ (80004b4 <SendATCommand+0xb0>)
 800044c:	f002 fba8 	bl	8002ba0 <strstr>
 8000450:	6138      	str	r0, [r7, #16]
        	if(ptr_ok != NULL)
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d00a      	beq.n	800046e <SendATCommand+0x6a>
        	{
        		HAL_UART_Transmit(&huart3, (uint8_t*)Loc_Buf, strlen(Loc_Buf), 1000);
 8000458:	4816      	ldr	r0, [pc, #88]	@ (80004b4 <SendATCommand+0xb0>)
 800045a:	f7ff fe77 	bl	800014c <strlen>
 800045e:	4603      	mov	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000466:	4913      	ldr	r1, [pc, #76]	@ (80004b4 <SendATCommand+0xb0>)
 8000468:	4814      	ldr	r0, [pc, #80]	@ (80004bc <SendATCommand+0xb8>)
 800046a:	f001 fbb5 	bl	8001bd8 <HAL_UART_Transmit>
        	}
        	char *ptr_err = strstr(Loc_Buf, "ERROR");
 800046e:	4914      	ldr	r1, [pc, #80]	@ (80004c0 <SendATCommand+0xbc>)
 8000470:	4810      	ldr	r0, [pc, #64]	@ (80004b4 <SendATCommand+0xb0>)
 8000472:	f002 fb95 	bl	8002ba0 <strstr>
 8000476:	60f8      	str	r0, [r7, #12]
        	if(ptr_err != NULL)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d00a      	beq.n	8000494 <SendATCommand+0x90>
        	{
        		HAL_UART_Transmit(&huart3, (uint8_t*)Loc_Buf, strlen(Loc_Buf), 1000);
 800047e:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <SendATCommand+0xb0>)
 8000480:	f7ff fe64 	bl	800014c <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800048c:	4909      	ldr	r1, [pc, #36]	@ (80004b4 <SendATCommand+0xb0>)
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <SendATCommand+0xb8>)
 8000490:	f001 fba2 	bl	8001bd8 <HAL_UART_Transmit>
        	}
        }

    if(ptr != NULL)
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SendATCommand+0x9a>
    {
    	return 0;
 800049a:	2300      	movs	r3, #0
 800049c:	e000      	b.n	80004a0 <SendATCommand+0x9c>
    }
    else
    {
    	return 1;
 800049e:	2301      	movs	r3, #1
    }
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000028 	.word	0x20000028
 80004ac:	200000fc 	.word	0x200000fc
 80004b0:	200000b8 	.word	0x200000b8
 80004b4:	2000017c 	.word	0x2000017c
 80004b8:	08002c54 	.word	0x08002c54
 80004bc:	20000070 	.word	0x20000070
 80004c0:	08002c58 	.word	0x08002c58

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a14      	ldr	r2, [pc, #80]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <HAL_MspInit+0x60>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <HAL_MspInit+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a4f      	ldr	r2, [pc, #316]	@ (8000680 <HAL_UART_MspInit+0x158>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d160      	bne.n	800060a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000548:	4b4e      	ldr	r3, [pc, #312]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a4d      	ldr	r2, [pc, #308]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b4b      	ldr	r3, [pc, #300]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b48      	ldr	r3, [pc, #288]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a47      	ldr	r2, [pc, #284]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b45      	ldr	r3, [pc, #276]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2303      	movs	r3, #3
 8000584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4619      	mov	r1, r3
 800058c:	483e      	ldr	r0, [pc, #248]	@ (8000688 <HAL_UART_MspInit+0x160>)
 800058e:	f000 fd27 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4619      	mov	r1, r3
 80005a6:	4838      	ldr	r0, [pc, #224]	@ (8000688 <HAL_UART_MspInit+0x160>)
 80005a8:	f000 fd1a 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005ac:	4b37      	ldr	r3, [pc, #220]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005ae:	4a38      	ldr	r2, [pc, #224]	@ (8000690 <HAL_UART_MspInit+0x168>)
 80005b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b2:	4b36      	ldr	r3, [pc, #216]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b8:	4b34      	ldr	r3, [pc, #208]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005c4:	4b31      	ldr	r3, [pc, #196]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ca:	4b30      	ldr	r3, [pc, #192]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005d0:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005dc:	482b      	ldr	r0, [pc, #172]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005de:	f000 fa5d 	bl	8000a9c <HAL_DMA_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80005e8:	f7ff feca 	bl	8000380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a27      	ldr	r2, [pc, #156]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005f2:	4a26      	ldr	r2, [pc, #152]	@ (800068c <HAL_UART_MspInit+0x164>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2025      	movs	r0, #37	@ 0x25
 80005fe:	f000 fa16 	bl	8000a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000602:	2025      	movs	r0, #37	@ 0x25
 8000604:	f000 fa2f 	bl	8000a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000608:	e036      	b.n	8000678 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <HAL_UART_MspInit+0x16c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d131      	bne.n	8000678 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a1a      	ldr	r2, [pc, #104]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800061a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_UART_MspInit+0x15c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	4619      	mov	r1, r3
 8000658:	480f      	ldr	r0, [pc, #60]	@ (8000698 <HAL_UART_MspInit+0x170>)
 800065a:	f000 fcc1 	bl	8000fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800065e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4619      	mov	r1, r3
 8000672:	4809      	ldr	r0, [pc, #36]	@ (8000698 <HAL_UART_MspInit+0x170>)
 8000674:	f000 fcb4 	bl	8000fe0 <HAL_GPIO_Init>
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40013800 	.word	0x40013800
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800
 800068c:	200000b8 	.word	0x200000b8
 8000690:	40020058 	.word	0x40020058
 8000694:	40004800 	.word	0x40004800
 8000698:	40010c00 	.word	0x40010c00

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <NMI_Handler+0x4>

080006a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <MemManage_Handler+0x4>

080006b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f888 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006f8:	4802      	ldr	r0, [pc, #8]	@ (8000704 <DMA1_Channel5_IRQHandler+0x10>)
 80006fa:	f000 fb3d 	bl	8000d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000b8 	.word	0x200000b8

08000708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <USART1_IRQHandler+0x10>)
 800070e:	f001 fb47 	bl	8001da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028

0800071c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000728:	f7ff fff8 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800072e:	490c      	ldr	r1, [pc, #48]	@ (8000760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000730:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000744:	4c09      	ldr	r4, [pc, #36]	@ (800076c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000752:	f002 fa3b 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000756:	f7ff fd01 	bl	800015c <main>
  bx lr
 800075a:	4770      	bx	lr
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000764:	08002c9c 	.word	0x08002c9c
  ldr r2, =_sbss
 8000768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800076c:	20000200 	.word	0x20000200

08000770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_2_IRQHandler>
	...

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_Init+0x28>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <HAL_Init+0x28>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 f947 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	200f      	movs	r0, #15
 800078c:	f000 f808 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff fe98 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_InitTick+0x54>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_InitTick+0x58>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f95f 	bl	8000a82 <HAL_SYSTICK_Config>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00e      	b.n	80007ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d80a      	bhi.n	80007ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 f927 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4a06      	ldr	r2, [pc, #24]	@ (80007fc <HAL_InitTick+0x5c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_IncTick+0x1c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_IncTick+0x20>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a03      	ldr	r2, [pc, #12]	@ (8000820 <HAL_IncTick+0x20>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	20000008 	.word	0x20000008
 8000820:	200001fc 	.word	0x200001fc

08000824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b02      	ldr	r3, [pc, #8]	@ (8000834 <HAL_GetTick+0x10>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	200001fc 	.word	0x200001fc

08000838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff fff0 	bl	8000824 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffe0 	bl	8000824 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4906      	ldr	r1, [pc, #24]	@ (8000918 <__NVIC_EnableIRQ+0x34>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	@ (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	@ 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	@ 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f7ff ff90 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff2d 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff42 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff90 	bl	8000970 <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5f 	bl	800091c <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff35 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffa2 	bl	80009d4 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e043      	b.n	8000b3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <HAL_DMA_Init+0xa8>)
 8000aba:	4413      	add	r3, r2
 8000abc:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <HAL_DMA_Init+0xac>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	009a      	lsls	r2, r3, #2
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b4c <HAL_DMA_Init+0xb0>)
 8000ace:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ae6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	bffdfff8 	.word	0xbffdfff8
 8000b48:	cccccccd 	.word	0xcccccccd
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <HAL_DMA_Start_IT+0x20>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e04b      	b.n	8000c08 <HAL_DMA_Start_IT+0xb8>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d13a      	bne.n	8000bfa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2202      	movs	r2, #2
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0201 	bic.w	r2, r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f9eb 	bl	8000f84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f042 020e 	orr.w	r2, r2, #14
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e00f      	b.n	8000be8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0204 	bic.w	r2, r2, #4
 8000bd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f042 020a 	orr.w	r2, r2, #10
 8000be6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0201 	orr.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e005      	b.n	8000c06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c02:	2302      	movs	r3, #2
 8000c04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d008      	beq.n	8000c3a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e020      	b.n	8000c7c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 020e 	bic.w	r2, r2, #14
 8000c48:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0201 	bic.w	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d005      	beq.n	8000cac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e051      	b.n	8000d50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 020e 	bic.w	r2, r2, #14
 8000cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <HAL_DMA_Abort_IT+0xd4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d029      	beq.n	8000d2a <HAL_DMA_Abort_IT+0xa2>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a21      	ldr	r2, [pc, #132]	@ (8000d60 <HAL_DMA_Abort_IT+0xd8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d022      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x9e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <HAL_DMA_Abort_IT+0xdc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d01a      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x98>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <HAL_DMA_Abort_IT+0xe0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d012      	beq.n	8000d1a <HAL_DMA_Abort_IT+0x92>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <HAL_DMA_Abort_IT+0xe4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00a      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x8c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <HAL_DMA_Abort_IT+0xe8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d102      	bne.n	8000d0e <HAL_DMA_Abort_IT+0x86>
 8000d08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d0c:	e00e      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d12:	e00b      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d18:	e008      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1e:	e005      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d24:	e002      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d26:	2310      	movs	r3, #16
 8000d28:	e000      	b.n	8000d2c <HAL_DMA_Abort_IT+0xa4>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4a11      	ldr	r2, [pc, #68]	@ (8000d74 <HAL_DMA_Abort_IT+0xec>)
 8000d2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	4798      	blx	r3
    } 
  }
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020008 	.word	0x40020008
 8000d60:	4002001c 	.word	0x4002001c
 8000d64:	40020030 	.word	0x40020030
 8000d68:	40020044 	.word	0x40020044
 8000d6c:	40020058 	.word	0x40020058
 8000d70:	4002006c 	.word	0x4002006c
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	2204      	movs	r2, #4
 8000d96:	409a      	lsls	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d04f      	beq.n	8000e40 <HAL_DMA_IRQHandler+0xc8>
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d04a      	beq.n	8000e40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d107      	bne.n	8000dc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0204 	bic.w	r2, r2, #4
 8000dc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a66      	ldr	r2, [pc, #408]	@ (8000f68 <HAL_DMA_IRQHandler+0x1f0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d029      	beq.n	8000e26 <HAL_DMA_IRQHandler+0xae>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a65      	ldr	r2, [pc, #404]	@ (8000f6c <HAL_DMA_IRQHandler+0x1f4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d022      	beq.n	8000e22 <HAL_DMA_IRQHandler+0xaa>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a63      	ldr	r2, [pc, #396]	@ (8000f70 <HAL_DMA_IRQHandler+0x1f8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d01a      	beq.n	8000e1c <HAL_DMA_IRQHandler+0xa4>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a62      	ldr	r2, [pc, #392]	@ (8000f74 <HAL_DMA_IRQHandler+0x1fc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d012      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x9e>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a60      	ldr	r2, [pc, #384]	@ (8000f78 <HAL_DMA_IRQHandler+0x200>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00a      	beq.n	8000e10 <HAL_DMA_IRQHandler+0x98>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8000f7c <HAL_DMA_IRQHandler+0x204>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d102      	bne.n	8000e0a <HAL_DMA_IRQHandler+0x92>
 8000e04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e08:	e00e      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e0a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e0e:	e00b      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e14:	e008      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e1a:	e005      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e20:	e002      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e22:	2340      	movs	r3, #64	@ 0x40
 8000e24:	e000      	b.n	8000e28 <HAL_DMA_IRQHandler+0xb0>
 8000e26:	2304      	movs	r3, #4
 8000e28:	4a55      	ldr	r2, [pc, #340]	@ (8000f80 <HAL_DMA_IRQHandler+0x208>)
 8000e2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8094 	beq.w	8000f5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e3e:	e08e      	b.n	8000f5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	2202      	movs	r2, #2
 8000e46:	409a      	lsls	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d056      	beq.n	8000efe <HAL_DMA_IRQHandler+0x186>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d051      	beq.n	8000efe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0320 	and.w	r3, r3, #32
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10b      	bne.n	8000e80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 020a 	bic.w	r2, r2, #10
 8000e76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a38      	ldr	r2, [pc, #224]	@ (8000f68 <HAL_DMA_IRQHandler+0x1f0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d029      	beq.n	8000ede <HAL_DMA_IRQHandler+0x166>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a37      	ldr	r2, [pc, #220]	@ (8000f6c <HAL_DMA_IRQHandler+0x1f4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d022      	beq.n	8000eda <HAL_DMA_IRQHandler+0x162>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a35      	ldr	r2, [pc, #212]	@ (8000f70 <HAL_DMA_IRQHandler+0x1f8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01a      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x15c>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a34      	ldr	r2, [pc, #208]	@ (8000f74 <HAL_DMA_IRQHandler+0x1fc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d012      	beq.n	8000ece <HAL_DMA_IRQHandler+0x156>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a32      	ldr	r2, [pc, #200]	@ (8000f78 <HAL_DMA_IRQHandler+0x200>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00a      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0x150>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a31      	ldr	r2, [pc, #196]	@ (8000f7c <HAL_DMA_IRQHandler+0x204>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <HAL_DMA_IRQHandler+0x14a>
 8000ebc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ec0:	e00e      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000ec2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ec6:	e00b      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ecc:	e008      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed2:	e005      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed8:	e002      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000eda:	2320      	movs	r3, #32
 8000edc:	e000      	b.n	8000ee0 <HAL_DMA_IRQHandler+0x168>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <HAL_DMA_IRQHandler+0x208>)
 8000ee2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d034      	beq.n	8000f5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000efc:	e02f      	b.n	8000f5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	2208      	movs	r2, #8
 8000f04:	409a      	lsls	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d028      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x1e8>
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d023      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 020e 	bic.w	r2, r2, #14
 8000f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
    }
  }
  return;
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
}
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020008 	.word	0x40020008
 8000f6c:	4002001c 	.word	0x4002001c
 8000f70:	40020030 	.word	0x40020030
 8000f74:	40020044 	.word	0x40020044
 8000f78:	40020058 	.word	0x40020058
 8000f7c:	4002006c 	.word	0x4002006c
 8000f80:	40020000 	.word	0x40020000

08000f84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d108      	bne.n	8000fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fc2:	e007      	b.n	8000fd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b08b      	sub	sp, #44	@ 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e169      	b.n	80012c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8158 	bne.w	80012c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a9a      	ldr	r2, [pc, #616]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d05e      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800101c:	4a98      	ldr	r2, [pc, #608]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d875      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001022:	4a98      	ldr	r2, [pc, #608]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d058      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001028:	4a96      	ldr	r2, [pc, #600]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d86f      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800102e:	4a96      	ldr	r2, [pc, #600]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d052      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001034:	4a94      	ldr	r2, [pc, #592]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d869      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800103a:	4a94      	ldr	r2, [pc, #592]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d04c      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001040:	4a92      	ldr	r2, [pc, #584]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d863      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001046:	4a92      	ldr	r2, [pc, #584]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d046      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800104c:	4a90      	ldr	r2, [pc, #576]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d85d      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d82a      	bhi.n	80010ac <HAL_GPIO_Init+0xcc>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d859      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800105a:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <HAL_GPIO_Init+0x80>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010db 	.word	0x080010db
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010c7 	.word	0x080010c7
 800106c:	08001109 	.word	0x08001109
 8001070:	0800110f 	.word	0x0800110f
 8001074:	0800110f 	.word	0x0800110f
 8001078:	0800110f 	.word	0x0800110f
 800107c:	0800110f 	.word	0x0800110f
 8001080:	0800110f 	.word	0x0800110f
 8001084:	0800110f 	.word	0x0800110f
 8001088:	0800110f 	.word	0x0800110f
 800108c:	0800110f 	.word	0x0800110f
 8001090:	0800110f 	.word	0x0800110f
 8001094:	0800110f 	.word	0x0800110f
 8001098:	0800110f 	.word	0x0800110f
 800109c:	0800110f 	.word	0x0800110f
 80010a0:	0800110f 	.word	0x0800110f
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	4a79      	ldr	r2, [pc, #484]	@ (8001294 <HAL_GPIO_Init+0x2b4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010b2:	e02c      	b.n	800110e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	623b      	str	r3, [r7, #32]
          break;
 80010ba:	e029      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	3304      	adds	r3, #4
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e024      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	3308      	adds	r3, #8
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e01f      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	330c      	adds	r3, #12
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e01a      	b.n	8001110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e2:	2304      	movs	r3, #4
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e013      	b.n	8001110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	611a      	str	r2, [r3, #16]
          break;
 80010fa:	e009      	b.n	8001110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010fc:	2308      	movs	r3, #8
 80010fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	615a      	str	r2, [r3, #20]
          break;
 8001106:	e003      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x130>
          break;
 800110e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	@ 0xff
 8001114:	d801      	bhi.n	800111a <HAL_GPIO_Init+0x13a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e001      	b.n	800111e <HAL_GPIO_Init+0x13e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3304      	adds	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d802      	bhi.n	800112c <HAL_GPIO_Init+0x14c>
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x152>
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	3b08      	subs	r3, #8
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	210f      	movs	r1, #15
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	6a39      	ldr	r1, [r7, #32]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80b1 	beq.w	80012c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a4c      	ldr	r2, [pc, #304]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b4a      	ldr	r3, [pc, #296]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001178:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a40      	ldr	r2, [pc, #256]	@ (80012a0 <HAL_GPIO_Init+0x2c0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	@ (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <HAL_GPIO_Init+0x2c8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_GPIO_Init+0x2cc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e0>
 80011bc:	2303      	movs	r3, #3
 80011be:	e006      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e004      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011cc:	2300      	movs	r3, #0
 80011ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011de:	492f      	ldr	r1, [pc, #188]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	492c      	ldr	r1, [pc, #176]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4928      	ldr	r1, [pc, #160]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	4922      	ldr	r1, [pc, #136]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	491e      	ldr	r1, [pc, #120]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4918      	ldr	r1, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4914      	ldr	r1, [pc, #80]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d021      	beq.n	80012b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	490e      	ldr	r1, [pc, #56]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e021      	b.n	80012c2 <HAL_GPIO_Init+0x2e2>
 800127e:	bf00      	nop
 8001280:	10320000 	.word	0x10320000
 8001284:	10310000 	.word	0x10310000
 8001288:	10220000 	.word	0x10220000
 800128c:	10210000 	.word	0x10210000
 8001290:	10120000 	.word	0x10120000
 8001294:	10110000 	.word	0x10110000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40011400 	.word	0x40011400
 80012b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012be:	4013      	ands	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae8e 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	@ 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e272      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8087 	beq.w	8001446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001338:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b04      	cmp	r3, #4
 8001342:	d00c      	beq.n	800135e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001344:	4b8f      	ldr	r3, [pc, #572]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d112      	bne.n	8001376 <HAL_RCC_OscConfig+0x5e>
 8001350:	4b8c      	ldr	r3, [pc, #560]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135c:	d10b      	bne.n	8001376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	4b89      	ldr	r3, [pc, #548]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d06c      	beq.n	8001444 <HAL_RCC_OscConfig+0x12c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d168      	bne.n	8001444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e24c      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x76>
 8001380:	4b80      	ldr	r3, [pc, #512]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a7f      	ldr	r2, [pc, #508]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e02e      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b7b      	ldr	r3, [pc, #492]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a7a      	ldr	r2, [pc, #488]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b78      	ldr	r3, [pc, #480]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a77      	ldr	r2, [pc, #476]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0xbc>
 80013ba:	4b72      	ldr	r3, [pc, #456]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a71      	ldr	r2, [pc, #452]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 80013d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a67      	ldr	r2, [pc, #412]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa16 	bl	8000824 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fa12 	bl	8000824 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	@ 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e200      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xe4>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fa02 	bl	8000824 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff f9fe 	bl	8000824 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1ec      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x10c>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001452:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800145e:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x18c>
 800146a:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b43      	ldr	r3, [pc, #268]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x176>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c0      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4939      	ldr	r1, [pc, #228]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <HAL_RCC_OscConfig+0x270>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff f9b7 	bl	8000824 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff f9b3 	bl	8000824 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a1      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4927      	ldr	r1, [pc, #156]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <HAL_RCC_OscConfig+0x270>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff f996 	bl	8000824 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff f992 	bl	8000824 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e180      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03a      	beq.n	800159c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d019      	beq.n	8001562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <HAL_RCC_OscConfig+0x274>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff f976 	bl	8000824 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff f972 	bl	8000824 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e160      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f000 face 	bl	8001afc <RCC_Delay>
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_RCC_OscConfig+0x274>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff f95c 	bl	8000824 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	e00f      	b.n	8001590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff f958 	bl	8000824 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d908      	bls.n	8001590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e146      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	42420000 	.word	0x42420000
 800158c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e9      	bne.n	8001570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a6 	beq.w	80016f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b8b      	ldr	r3, [pc, #556]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a87      	ldr	r2, [pc, #540]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b85      	ldr	r3, [pc, #532]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b82      	ldr	r3, [pc, #520]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b7f      	ldr	r3, [pc, #508]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7e      	ldr	r2, [pc, #504]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f919 	bl	8000824 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff f915 	bl	8000824 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	@ 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e103      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b75      	ldr	r3, [pc, #468]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x312>
 800161c:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e02d      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x334>
 8001632:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a69      	ldr	r2, [pc, #420]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a66      	ldr	r2, [pc, #408]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x356>
 8001654:	4b61      	ldr	r3, [pc, #388]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a60      	ldr	r2, [pc, #384]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	4b5e      	ldr	r3, [pc, #376]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a5d      	ldr	r2, [pc, #372]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800166e:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a5a      	ldr	r2, [pc, #360]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4b58      	ldr	r3, [pc, #352]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a57      	ldr	r2, [pc, #348]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff f8c9 	bl	8000824 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f8c5 	bl	8000824 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0b1      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x37e>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f8b3 	bl	8000824 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f8af 	bl	8000824 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e09b      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b40      	ldr	r3, [pc, #256]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b3c      	ldr	r3, [pc, #240]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d061      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d146      	bne.n	80017a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff f883 	bl	8000824 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff f87f 	bl	8000824 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e06d      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001748:	d108      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800174a:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4921      	ldr	r1, [pc, #132]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a19      	ldr	r1, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	430b      	orrs	r3, r1
 800176e:	491b      	ldr	r1, [pc, #108]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff f853 	bl	8000824 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff f84f 	bl	8000824 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e03d      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x46a>
 80017a0:	e035      	b.n	800180e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff f83c 	bl	8000824 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f838 	bl	8000824 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e026      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x498>
 80017ce:	e01e      	b.n	800180e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e019      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x500>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0d0      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b6a      	ldr	r3, [pc, #424]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d910      	bls.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b67      	ldr	r3, [pc, #412]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0207 	bic.w	r2, r3, #7
 8001846:	4965      	ldr	r1, [pc, #404]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a58      	ldr	r2, [pc, #352]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800189a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d040      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e073      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4936      	ldr	r1, [pc, #216]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7fe ff8a 	bl	8000824 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7fe ff86 	bl	8000824 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e053      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d210      	bcs.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4922      	ldr	r1, [pc, #136]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1cc>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1d0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fee8 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08002c60 	.word	0x08002c60
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d002      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x30>
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x36>
 8001a1e:	e027      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	613b      	str	r3, [r7, #16]
      break;
 8001a24:	e027      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d010      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0c5b      	lsrs	r3, r3, #17
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a52:	fb03 f202 	mul.w	r2, r3, r2
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e004      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	613b      	str	r3, [r7, #16]
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a72:	613b      	str	r3, [r7, #16]
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	693b      	ldr	r3, [r7, #16]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	08002c78 	.word	0x08002c78
 8001a90:	08002c88 	.word	0x08002c88
 8001a94:	003d0900 	.word	0x003d0900

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	@ (8001aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08002c70 	.word	0x08002c70

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08002c70 	.word	0x08002c70

08001afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <RCC_Delay+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <RCC_Delay+0x38>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a5b      	lsrs	r3, r3, #9
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b18:	bf00      	nop
  }
  while (Delay --);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <RCC_Delay+0x1c>
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000000 	.word	0x20000000
 8001b34:	10624dd3 	.word	0x10624dd3

08001b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e042      	b.n	8001bd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe fce2 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 ff79 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d175      	bne.n	8001ce4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_UART_Transmit+0x2c>
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e06e      	b.n	8001ce6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2221      	movs	r2, #33	@ 0x21
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c16:	f7fe fe05 	bl	8000824 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c30:	d108      	bne.n	8001c44 <HAL_UART_Transmit+0x6c>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	e003      	b.n	8001c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c4c:	e02e      	b.n	8001cac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2180      	movs	r1, #128	@ 0x80
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fc55 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e03a      	b.n	8001ce6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10b      	bne.n	8001c8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	3302      	adds	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	e007      	b.n	8001c9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1cb      	bne.n	8001c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2140      	movs	r1, #64	@ 0x40
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fc21 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e006      	b.n	8001ce6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b08c      	sub	sp, #48	@ 0x30
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d146      	bne.n	8001d96 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e03f      	b.n	8001d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fc46 	bl	80025bc <UART_Start_Receive_DMA>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d125      	bne.n	8001d8a <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	e853 3f00 	ldrex	r3, [r3]
 8001d62:	617b      	str	r3, [r7, #20]
   return(result);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	330c      	adds	r3, #12
 8001d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d76:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d78:	6a39      	ldr	r1, [r7, #32]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	e841 2300 	strex	r3, r2, [r1]
 8001d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e5      	bne.n	8001d54 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8001d88:	e002      	b.n	8001d90 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8001d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d94:	e000      	b.n	8001d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3730      	adds	r7, #48	@ 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0ba      	sub	sp, #232	@ 0xe8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_UART_IRQHandler+0x66>
 8001df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fd7a 	bl	80028f8 <UART_Receive_IT>
      return;
 8001e04:	e25b      	b.n	80022be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80de 	beq.w	8001fcc <HAL_UART_IRQHandler+0x22c>
 8001e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80d1 	beq.w	8001fcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_UART_IRQHandler+0xae>
 8001e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_UART_IRQHandler+0xd2>
 8001e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f043 0202 	orr.w	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_UART_IRQHandler+0xf6>
 8001e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d011      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x126>
 8001ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f043 0208 	orr.w	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81f2 	beq.w	80022b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_UART_IRQHandler+0x14e>
 8001edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fd05 	bl	80028f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_UART_IRQHandler+0x17a>
 8001f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d04f      	beq.n	8001fba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fc0f 	bl	800273e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d041      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3314      	adds	r3, #20
 8001f34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f3c:	e853 3f00 	ldrex	r3, [r3]
 8001f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3314      	adds	r3, #20
 8001f56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f6a:	e841 2300 	strex	r3, r2, [r1]
 8001f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1d9      	bne.n	8001f2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d013      	beq.n	8001faa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	4a7e      	ldr	r2, [pc, #504]	@ (8002180 <HAL_UART_IRQHandler+0x3e0>)
 8001f88:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe7a 	bl	8000c88 <HAL_DMA_Abort_IT>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e00e      	b.n	8001fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f9a5 	bl	80022fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e00a      	b.n	8001fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f9a1 	bl	80022fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	e006      	b.n	8001fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f99d 	bl	80022fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001fc6:	e175      	b.n	80022b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	bf00      	nop
    return;
 8001fca:	e173      	b.n	80022b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 814f 	bne.w	8002274 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8148 	beq.w	8002274 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8141 	beq.w	8002274 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80b6 	beq.w	8002184 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8145 	beq.w	80022b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002036:	429a      	cmp	r2, r3
 8002038:	f080 813e 	bcs.w	80022b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002042:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b20      	cmp	r3, #32
 800204c:	f000 8088 	beq.w	8002160 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	330c      	adds	r3, #12
 8002056:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800205e:	e853 3f00 	ldrex	r3, [r3]
 8002062:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002066:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800206a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800206e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800207c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002080:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002084:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002088:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800208c:	e841 2300 	strex	r3, r2, [r1]
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1d9      	bne.n	8002050 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3314      	adds	r3, #20
 80020a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020a6:	e853 3f00 	ldrex	r3, [r3]
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3314      	adds	r3, #20
 80020bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80020c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e1      	bne.n	800209c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3314      	adds	r3, #20
 80020de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020e2:	e853 3f00 	ldrex	r3, [r3]
 80020e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3314      	adds	r3, #20
 80020f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002100:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002102:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002104:	e841 2300 	strex	r3, r2, [r1]
 8002108:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800210a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e3      	bne.n	80020d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800212e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002130:	f023 0310 	bic.w	r3, r3, #16
 8002134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002142:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002144:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002146:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002148:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800214a:	e841 2300 	strex	r3, r2, [r1]
 800214e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e3      	bne.n	800211e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fd58 	bl	8000c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800216e:	b29b      	uxth	r3, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe f926 	bl	80003c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800217c:	e09c      	b.n	80022b8 <HAL_UART_IRQHandler+0x518>
 800217e:	bf00      	nop
 8002180:	08002803 	.word	0x08002803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800218c:	b29b      	uxth	r3, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 808e 	beq.w	80022bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8089 	beq.w	80022bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	330c      	adds	r3, #12
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b4:	e853 3f00 	ldrex	r3, [r3]
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80021ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	330c      	adds	r3, #12
 80021ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80021ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80021d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e3      	bne.n	80021aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3314      	adds	r3, #20
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	e853 3f00 	ldrex	r3, [r3]
 80021f0:	623b      	str	r3, [r7, #32]
   return(result);
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002206:	633a      	str	r2, [r7, #48]	@ 0x30
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800220c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800220e:	e841 2300 	strex	r3, r2, [r1]
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1e3      	bne.n	80021e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	330c      	adds	r3, #12
 800222e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	e853 3f00 	ldrex	r3, [r3]
 8002236:	60fb      	str	r3, [r7, #12]
   return(result);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0310 	bic.w	r3, r3, #16
 800223e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800224c:	61fa      	str	r2, [r7, #28]
 800224e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002250:	69b9      	ldr	r1, [r7, #24]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	e841 2300 	strex	r3, r2, [r1]
 8002258:	617b      	str	r3, [r7, #20]
   return(result);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e3      	bne.n	8002228 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002266:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe f8ab 	bl	80003c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002272:	e023      	b.n	80022bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_UART_IRQHandler+0x4f4>
 8002280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 facc 	bl	800282a <UART_Transmit_IT>
    return;
 8002292:	e014      	b.n	80022be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <HAL_UART_IRQHandler+0x51e>
 80022a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fb0b 	bl	80028c8 <UART_EndTransmit_IT>
    return;
 80022b2:	e004      	b.n	80022be <HAL_UART_IRQHandler+0x51e>
    return;
 80022b4:	bf00      	nop
 80022b6:	e002      	b.n	80022be <HAL_UART_IRQHandler+0x51e>
      return;
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <HAL_UART_IRQHandler+0x51e>
      return;
 80022bc:	bf00      	nop
  }
}
 80022be:	37e8      	adds	r7, #232	@ 0xe8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b09c      	sub	sp, #112	@ 0x70
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d172      	bne.n	800240e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800232a:	2200      	movs	r2, #0
 800232c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800232e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800233e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800234e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002350:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800235c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	667b      	str	r3, [r7, #100]	@ 0x64
 800237a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002382:	647a      	str	r2, [r7, #68]	@ 0x44
 8002384:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e5      	bne.n	8002362 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3314      	adds	r3, #20
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	623b      	str	r3, [r7, #32]
   return(result);
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3314      	adds	r3, #20
 80023b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023be:	e841 2300 	strex	r3, r2, [r1]
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1e5      	bne.n	8002396 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d119      	bne.n	800240e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f023 0310 	bic.w	r3, r3, #16
 80023f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023fa:	61fa      	str	r2, [r7, #28]
 80023fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	e841 2300 	strex	r3, r2, [r1]
 8002406:	617b      	str	r3, [r7, #20]
   return(result);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e5      	bne.n	80023da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002410:	2200      	movs	r2, #0
 8002412:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800241c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800241e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002420:	4619      	mov	r1, r3
 8002422:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002424:	f7fd ffd0 	bl	80003c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002428:	e002      	b.n	8002430 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800242a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800242c:	f7ff ff53 	bl	80022d6 <HAL_UART_RxCpltCallback>
}
 8002430:	bf00      	nop
 8002432:	3770      	adds	r7, #112	@ 0x70
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7fd ffb2 	bl	80003c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002464:	e002      	b.n	800246c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ff3e 	bl	80022e8 <HAL_UART_RxHalfCpltCallback>
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b21      	cmp	r3, #33	@ 0x21
 80024a6:	d108      	bne.n	80024ba <UART_DMAError+0x46>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f000 f91b 	bl	80026f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b22      	cmp	r3, #34	@ 0x22
 80024da:	d108      	bne.n	80024ee <UART_DMAError+0x7a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80024e8:	68b8      	ldr	r0, [r7, #8]
 80024ea:	f000 f928 	bl	800273e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024fa:	68b8      	ldr	r0, [r7, #8]
 80024fc:	f7ff fefd 	bl	80022fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002518:	e03b      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d037      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe f97f 	bl	8000824 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <UART_WaitOnFlagUntilTimeout+0x30>
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e03a      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d023      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b80      	cmp	r3, #128	@ 0x80
 800254e:	d020      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b40      	cmp	r3, #64	@ 0x40
 8002554:	d01d      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d116      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8df 	bl	800273e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2208      	movs	r2, #8
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d0b4      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b098      	sub	sp, #96	@ 0x60
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	88fa      	ldrh	r2, [r7, #6]
 80025d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2222      	movs	r2, #34	@ 0x22
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	4a3e      	ldr	r2, [pc, #248]	@ (80026e4 <UART_Start_Receive_DMA+0x128>)
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	4a3d      	ldr	r2, [pc, #244]	@ (80026e8 <UART_Start_Receive_DMA+0x12c>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	4a3c      	ldr	r2, [pc, #240]	@ (80026ec <UART_Start_Receive_DMA+0x130>)
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f7fe fa98 	bl	8000b50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d019      	beq.n	8002672 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002648:	e853 3f00 	ldrex	r3, [r3]
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800264e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800265e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002664:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800266c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e5      	bne.n	800263e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	657b      	str	r3, [r7, #84]	@ 0x54
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3314      	adds	r3, #20
 8002690:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002692:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e5      	bne.n	8002672 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	e853 3f00 	ldrex	r3, [r3]
 80026b4:	617b      	str	r3, [r7, #20]
   return(result);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80026c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80026c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6a39      	ldr	r1, [r7, #32]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e5      	bne.n	80026a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3760      	adds	r7, #96	@ 0x60
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0800230d 	.word	0x0800230d
 80026e8:	08002439 	.word	0x08002439
 80026ec:	08002475 	.word	0x08002475

080026f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	60bb      	str	r3, [r7, #8]
   return(result);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	61ba      	str	r2, [r7, #24]
 800271a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6979      	ldr	r1, [r7, #20]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	e841 2300 	strex	r3, r2, [r1]
 8002724:	613b      	str	r3, [r7, #16]
   return(result);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e5      	bne.n	80026f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002734:	bf00      	nop
 8002736:	3724      	adds	r7, #36	@ 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800273e:	b480      	push	{r7}
 8002740:	b095      	sub	sp, #84	@ 0x54
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800275c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002766:	643a      	str	r2, [r7, #64]	@ 0x40
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800276c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	61fb      	str	r3, [r7, #28]
   return(result);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800279a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e5      	bne.n	800277a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d119      	bne.n	80027ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f023 0310 	bic.w	r3, r3, #16
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027d6:	61ba      	str	r2, [r7, #24]
 80027d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	6979      	ldr	r1, [r7, #20]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	613b      	str	r3, [r7, #16]
   return(result);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027f8:	bf00      	nop
 80027fa:	3754      	adds	r7, #84	@ 0x54
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff fd6c 	bl	80022fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b21      	cmp	r3, #33	@ 0x21
 800283c:	d13e      	bne.n	80028bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002846:	d114      	bne.n	8002872 <UART_Transmit_IT+0x48>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d110      	bne.n	8002872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	1c9a      	adds	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	621a      	str	r2, [r3, #32]
 8002870:	e008      	b.n	8002884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	1c59      	adds	r1, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6211      	str	r1, [r2, #32]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29b      	uxth	r3, r3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4619      	mov	r1, r3
 8002892:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fceb 	bl	80022c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	@ 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b22      	cmp	r3, #34	@ 0x22
 800290a:	f040 80ae 	bne.w	8002a6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d117      	bne.n	8002948 <UART_Receive_IT+0x50>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	b29a      	uxth	r2, r3
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
 8002946:	e026      	b.n	8002996 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295a:	d007      	beq.n	800296c <UART_Receive_IT+0x74>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <UART_Receive_IT+0x82>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e008      	b.n	800298c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002986:	b2da      	uxtb	r2, r3
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4619      	mov	r1, r3
 80029a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d15d      	bne.n	8002a66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0220 	bic.w	r2, r2, #32
 80029b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d135      	bne.n	8002a5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	613b      	str	r3, [r7, #16]
   return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f023 0310 	bic.w	r3, r3, #16
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a16:	623a      	str	r2, [r7, #32]
 8002a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	69f9      	ldr	r1, [r7, #28]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d10a      	bne.n	8002a4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fd fcb7 	bl	80003c8 <HAL_UARTEx_RxEventCallback>
 8002a5a:	e002      	b.n	8002a62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fc3a 	bl	80022d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e002      	b.n	8002a6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	@ 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002aae:	f023 030c 	bic.w	r3, r3, #12
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b88 <UART_SetConfig+0x114>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002adc:	f7fe fffa 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	e002      	b.n	8002aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7fe ffe2 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009a      	lsls	r2, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	4a22      	ldr	r2, [pc, #136]	@ (8002b8c <UART_SetConfig+0x118>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	0119      	lsls	r1, r3, #4
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009a      	lsls	r2, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b20:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <UART_SetConfig+0x118>)
 8002b22:	fba3 0302 	umull	r0, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2064      	movs	r0, #100	@ 0x64
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	3332      	adds	r3, #50	@ 0x32
 8002b34:	4a15      	ldr	r2, [pc, #84]	@ (8002b8c <UART_SetConfig+0x118>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b40:	4419      	add	r1, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009a      	lsls	r2, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <UART_SetConfig+0x118>)
 8002b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2064      	movs	r0, #100	@ 0x64
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	3332      	adds	r3, #50	@ 0x32
 8002b6c:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <UART_SetConfig+0x118>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	51eb851f 	.word	0x51eb851f

08002b90 <memset>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	4402      	add	r2, r0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d100      	bne.n	8002b9a <memset+0xa>
 8002b98:	4770      	bx	lr
 8002b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9e:	e7f9      	b.n	8002b94 <memset+0x4>

08002ba0 <strstr>:
 8002ba0:	780a      	ldrb	r2, [r1, #0]
 8002ba2:	b570      	push	{r4, r5, r6, lr}
 8002ba4:	b96a      	cbnz	r2, 8002bc2 <strstr+0x22>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d109      	bne.n	8002bc0 <strstr+0x20>
 8002bac:	460c      	mov	r4, r1
 8002bae:	4605      	mov	r5, r0
 8002bb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f6      	beq.n	8002ba6 <strstr+0x6>
 8002bb8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002bbc:	429e      	cmp	r6, r3
 8002bbe:	d0f7      	beq.n	8002bb0 <strstr+0x10>
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	7803      	ldrb	r3, [r0, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ef      	bne.n	8002ba8 <strstr+0x8>
 8002bc8:	4618      	mov	r0, r3
 8002bca:	e7ec      	b.n	8002ba6 <strstr+0x6>

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	2600      	movs	r6, #0
 8002bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8002c04 <__libc_init_array+0x38>)
 8002bd2:	4c0d      	ldr	r4, [pc, #52]	@ (8002c08 <__libc_init_array+0x3c>)
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	f000 f828 	bl	8002c30 <_init>
 8002be0:	2600      	movs	r6, #0
 8002be2:	4d0a      	ldr	r5, [pc, #40]	@ (8002c0c <__libc_init_array+0x40>)
 8002be4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c10 <__libc_init_array+0x44>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08002c94 	.word	0x08002c94
 8002c08:	08002c94 	.word	0x08002c94
 8002c0c:	08002c94 	.word	0x08002c94
 8002c10:	08002c98 	.word	0x08002c98

08002c14 <memcpy>:
 8002c14:	440a      	add	r2, r1
 8002c16:	4291      	cmp	r1, r2
 8002c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c1c:	d100      	bne.n	8002c20 <memcpy+0xc>
 8002c1e:	4770      	bx	lr
 8002c20:	b510      	push	{r4, lr}
 8002c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c26:	4291      	cmp	r1, r2
 8002c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c2c:	d1f9      	bne.n	8002c22 <memcpy+0xe>
 8002c2e:	bd10      	pop	{r4, pc}

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
