
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cdc  08002cdc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00003cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ce4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08002cf0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08002cf0  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c0a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187a  00000000  00000000  0000bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052a  00000000  00000000  0000db88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d73  00000000  00000000  0000e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c58  00000000  00000000  00024e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e72  00000000  00000000  0002da7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a50  00000000  00000000  000af934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000b1384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c58 	.word	0x08002c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c58 	.word	0x08002c58

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb1b 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f821 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8cd 	bl	8000308 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f8ad 	bl	80002cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f857 	bl	8000224 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000176:	f000 f87f 	bl	8000278 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Eg_On(700);
 800017a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800017e:	f000 f909 	bl	8000394 <Eg_On>
  char cmnd[] = "ATI\r\n";
 8000182:	4a07      	ldr	r2, [pc, #28]	@ (80001a0 <main+0x44>)
 8000184:	463b      	mov	r3, r7
 8000186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800018a:	6018      	str	r0, [r3, #0]
 800018c:	3304      	adds	r3, #4
 800018e:	8019      	strh	r1, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  SendATCommand_O(cmnd, "OK", 300);
	  SendATCommand("AT+QHTTPPOST=48,80,80\r\n", "QHTTPPOST:", 20000);
 8000190:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000194:	4903      	ldr	r1, [pc, #12]	@ (80001a4 <main+0x48>)
 8000196:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <main+0x4c>)
 8000198:	f000 f938 	bl	800040c <SendATCommand>
 800019c:	e7f8      	b.n	8000190 <main+0x34>
 800019e:	bf00      	nop
 80001a0:	08002c94 	.word	0x08002c94
 80001a4:	08002c70 	.word	0x08002c70
 80001a8:	08002c7c 	.word	0x08002c7c

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	@ 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	@ 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fcfc 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f8ac 	bl	8001340 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f8cb 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fb1a 	bl	8001844 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f8b7 	bl	8000388 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	@ 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000228:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 800022a:	4a12      	ldr	r2, [pc, #72]	@ (8000274 <MX_USART1_UART_Init+0x50>)
 800022c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800022e:	4b10      	ldr	r3, [pc, #64]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 8000230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000236:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800023c:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000242:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 800024a:	220c      	movs	r2, #12
 800024c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 8000256:	2200      	movs	r2, #0
 8000258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025a:	4805      	ldr	r0, [pc, #20]	@ (8000270 <MX_USART1_UART_Init+0x4c>)
 800025c:	f001 fc80 	bl	8001b60 <HAL_UART_Init>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000266:	f000 f88f 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000028 	.word	0x20000028
 8000274:	40013800 	.word	0x40013800

08000278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 800027e:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <MX_USART3_UART_Init+0x50>)
 8000280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 8000284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <MX_USART3_UART_Init+0x4c>)
 80002b0:	f001 fc56 	bl	8001b60 <HAL_UART_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002ba:	f000 f865 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000070 	.word	0x20000070
 80002c8:	40004800 	.word	0x40004800

080002cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	200f      	movs	r0, #15
 80002f0:	f000 fbb1 	bl	8000a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002f4:	200f      	movs	r0, #15
 80002f6:	f000 fbca 	bl	8000a8e <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <MX_GPIO_Init+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <MX_GPIO_Init+0x78>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <MX_GPIO_Init+0x78>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <MX_GPIO_Init+0x78>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a11      	ldr	r2, [pc, #68]	@ (8000380 <MX_GPIO_Init+0x78>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_GPIO_Init+0x78>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EG_RST_Pin|EG_PWR_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000352:	480c      	ldr	r0, [pc, #48]	@ (8000384 <MX_GPIO_Init+0x7c>)
 8000354:	f000 ffdc 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EG_RST_Pin EG_PWR_Pin */
  GPIO_InitStruct.Pin = EG_RST_Pin|EG_PWR_Pin;
 8000358:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800035c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	@ (8000384 <MX_GPIO_Init+0x7c>)
 8000372:	f000 fe49 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000376:	bf00      	nop
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40010c00 	.word	0x40010c00

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <Eg_On>:

char DMA_Rx_Buf[AT_BUFFER_LENGTH] = {'\0'} ;
char Loc_Buf[AT_BUFFER_LENGTH] = {'\0'};

void Eg_On(uint32_t TimeOn)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003a2:	480a      	ldr	r0, [pc, #40]	@ (80003cc <Eg_On+0x38>)
 80003a4:	f000 ffb4 	bl	8001310 <HAL_GPIO_WritePin>
	HAL_Delay(TimeOn);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f000 fa59 	bl	8000860 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b4:	4805      	ldr	r0, [pc, #20]	@ (80003cc <Eg_On+0x38>)
 80003b6:	f000 ffab 	bl	8001310 <HAL_GPIO_WritePin>

	HAL_Delay(5000);
 80003ba:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003be:	f000 fa4f 	bl	8000860 <HAL_Delay>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <HAL_UARTEx_RxEventCallback+0x30>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d107      	bne.n	80003f6 <HAL_UARTEx_RxEventCallback+0x26>
	{
		 memcpy(Loc_Buf, DMA_Rx_Buf, AT_BUFFER_LENGTH);
 80003e6:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <HAL_UARTEx_RxEventCallback+0x34>)
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <HAL_UARTEx_RxEventCallback+0x38>)
 80003ea:	4610      	mov	r0, r2
 80003ec:	4619      	mov	r1, r3
 80003ee:	2380      	movs	r3, #128	@ 0x80
 80003f0:	461a      	mov	r2, r3
 80003f2:	f002 fc23 	bl	8002c3c <memcpy>
	}
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40013800 	.word	0x40013800
 8000404:	2000017c 	.word	0x2000017c
 8000408:	200000fc 	.word	0x200000fc

0800040c <SendATCommand>:

int SendATCommand(char *cmd, char *response, uint32_t Timeout)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
   uint32_t pastTime = HAL_GetTick();
 8000418:	f000 fa18 	bl	800084c <HAL_GetTick>
 800041c:	61f8      	str	r0, [r7, #28]
	HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 3000);
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f7ff fe94 	bl	800014c <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	b29a      	uxth	r2, r3
 8000428:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800042c:	68f9      	ldr	r1, [r7, #12]
 800042e:	4828      	ldr	r0, [pc, #160]	@ (80004d0 <SendATCommand+0xc4>)
 8000430:	f001 fbe6 	bl	8001c00 <HAL_UART_Transmit>



    while(HAL_GetTick() - pastTime < Timeout)
 8000434:	bf00      	nop
 8000436:	f000 fa09 	bl	800084c <HAL_GetTick>
 800043a:	4602      	mov	r2, r0
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	429a      	cmp	r2, r3
 8000444:	d93e      	bls.n	80004c4 <SendATCommand+0xb8>
    {
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)DMA_Rx_Buf, sizeof(DMA_Rx_Buf));
 8000446:	2280      	movs	r2, #128	@ 0x80
 8000448:	4922      	ldr	r1, [pc, #136]	@ (80004d4 <SendATCommand+0xc8>)
 800044a:	4821      	ldr	r0, [pc, #132]	@ (80004d0 <SendATCommand+0xc4>)
 800044c:	f001 fc63 	bl	8001d16 <HAL_UARTEx_ReceiveToIdle_DMA>
    	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <SendATCommand+0xcc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <SendATCommand+0xcc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f022 0204 	bic.w	r2, r2, #4
 800045e:	601a      	str	r2, [r3, #0]
    	char *ptr = strstr(Loc_Buf, response);
 8000460:	68b9      	ldr	r1, [r7, #8]
 8000462:	481e      	ldr	r0, [pc, #120]	@ (80004dc <SendATCommand+0xd0>)
 8000464:	f002 fbb0 	bl	8002bc8 <strstr>
 8000468:	61b8      	str	r0, [r7, #24]
    	        if(dBUG)
    	        {
    	        	char *ptr_ok = strstr(Loc_Buf, "OK");
 800046a:	491d      	ldr	r1, [pc, #116]	@ (80004e0 <SendATCommand+0xd4>)
 800046c:	481b      	ldr	r0, [pc, #108]	@ (80004dc <SendATCommand+0xd0>)
 800046e:	f002 fbab 	bl	8002bc8 <strstr>
 8000472:	6178      	str	r0, [r7, #20]
    	        	if(ptr_ok != NULL)
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00a      	beq.n	8000490 <SendATCommand+0x84>
    	        	{
    	        		HAL_UART_Transmit(&huart3, (uint8_t*)Loc_Buf, strlen(Loc_Buf), 1000);
 800047a:	4818      	ldr	r0, [pc, #96]	@ (80004dc <SendATCommand+0xd0>)
 800047c:	f7ff fe66 	bl	800014c <strlen>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000488:	4914      	ldr	r1, [pc, #80]	@ (80004dc <SendATCommand+0xd0>)
 800048a:	4816      	ldr	r0, [pc, #88]	@ (80004e4 <SendATCommand+0xd8>)
 800048c:	f001 fbb8 	bl	8001c00 <HAL_UART_Transmit>
    	        	}
    	        	char *ptr_err = strstr(Loc_Buf, "ERROR");
 8000490:	4915      	ldr	r1, [pc, #84]	@ (80004e8 <SendATCommand+0xdc>)
 8000492:	4812      	ldr	r0, [pc, #72]	@ (80004dc <SendATCommand+0xd0>)
 8000494:	f002 fb98 	bl	8002bc8 <strstr>
 8000498:	6138      	str	r0, [r7, #16]
    	        	if(ptr_err != NULL)
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00a      	beq.n	80004b6 <SendATCommand+0xaa>
    	        	{
    	        		HAL_UART_Transmit(&huart3, (uint8_t*)Loc_Buf, strlen(Loc_Buf), 1000);
 80004a0:	480e      	ldr	r0, [pc, #56]	@ (80004dc <SendATCommand+0xd0>)
 80004a2:	f7ff fe53 	bl	800014c <strlen>
 80004a6:	4603      	mov	r3, r0
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ae:	490b      	ldr	r1, [pc, #44]	@ (80004dc <SendATCommand+0xd0>)
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <SendATCommand+0xd8>)
 80004b2:	f001 fba5 	bl	8001c00 <HAL_UART_Transmit>
    	        	}
    	        }

    	    if(ptr != NULL)
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SendATCommand+0xb4>
    	    {
    	    	return 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	e002      	b.n	80004c6 <SendATCommand+0xba>
    	    }
    	    else
    	    {
    	    	return 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e000      	b.n	80004c6 <SendATCommand+0xba>
    	    }
    }
    return 0;
 80004c4:	2300      	movs	r3, #0

}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000028 	.word	0x20000028
 80004d4:	200000fc 	.word	0x200000fc
 80004d8:	200000b8 	.word	0x200000b8
 80004dc:	2000017c 	.word	0x2000017c
 80004e0:	08002c9c 	.word	0x08002c9c
 80004e4:	20000070 	.word	0x20000070
 80004e8:	08002ca0 	.word	0x08002ca0

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a4f      	ldr	r2, [pc, #316]	@ (80006a8 <HAL_UART_MspInit+0x158>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d160      	bne.n	8000632 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b4e      	ldr	r3, [pc, #312]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a4d      	ldr	r2, [pc, #308]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b4b      	ldr	r3, [pc, #300]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b48      	ldr	r3, [pc, #288]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a47      	ldr	r2, [pc, #284]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b45      	ldr	r3, [pc, #276]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4619      	mov	r1, r3
 80005b4:	483e      	ldr	r0, [pc, #248]	@ (80006b0 <HAL_UART_MspInit+0x160>)
 80005b6:	f000 fd27 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	4619      	mov	r1, r3
 80005ce:	4838      	ldr	r0, [pc, #224]	@ (80006b0 <HAL_UART_MspInit+0x160>)
 80005d0:	f000 fd1a 	bl	8001008 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005d4:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005d6:	4a38      	ldr	r2, [pc, #224]	@ (80006b8 <HAL_UART_MspInit+0x168>)
 80005d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b36      	ldr	r3, [pc, #216]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ec:	4b31      	ldr	r3, [pc, #196]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000604:	482b      	ldr	r0, [pc, #172]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 8000606:	f000 fa5d 	bl	8000ac4 <HAL_DMA_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000610:	f7ff feba 	bl	8000388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 8000618:	63da      	str	r2, [r3, #60]	@ 0x3c
 800061a:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <HAL_UART_MspInit+0x164>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2025      	movs	r0, #37	@ 0x25
 8000626:	f000 fa16 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800062a:	2025      	movs	r0, #37	@ 0x25
 800062c:	f000 fa2f 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000630:	e036      	b.n	80006a0 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <HAL_UART_MspInit+0x16c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d131      	bne.n	80006a0 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a1a      	ldr	r2, [pc, #104]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_UART_MspInit+0x15c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800066c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	4619      	mov	r1, r3
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <HAL_UART_MspInit+0x170>)
 8000682:	f000 fcc1 	bl	8001008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4619      	mov	r1, r3
 800069a:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <HAL_UART_MspInit+0x170>)
 800069c:	f000 fcb4 	bl	8001008 <HAL_GPIO_Init>
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	@ 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40013800 	.word	0x40013800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800
 80006b4:	200000b8 	.word	0x200000b8
 80006b8:	40020058 	.word	0x40020058
 80006bc:	40004800 	.word	0x40004800
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f888 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000720:	4802      	ldr	r0, [pc, #8]	@ (800072c <DMA1_Channel5_IRQHandler+0x10>)
 8000722:	f000 fb3d 	bl	8000da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b8 	.word	0x200000b8

08000730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <USART1_IRQHandler+0x10>)
 8000736:	f001 fb47 	bl	8001dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff fff8 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	@ (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	@ (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f002 fa3b 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fced 	bl	800015c <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	20000200 	.word	0x20000200

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f947 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe98 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f95f 	bl	8000aaa <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f927 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	@ (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	200001fc 	.word	0x200001fc

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	@ (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200001fc 	.word	0x200001fc

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4906      	ldr	r1, [pc, #24]	@ (8000940 <__NVIC_EnableIRQ+0x34>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	@ (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	@ (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	@ 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	@ 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff90 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff2d 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff42 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff35 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa2 	bl	80009fc <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e043      	b.n	8000b62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <HAL_DMA_Init+0xa8>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <HAL_DMA_Init+0xac>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <HAL_DMA_Init+0xb0>)
 8000af6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2202      	movs	r2, #2
 8000afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000b0e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	bffdfff8 	.word	0xbffdfff8
 8000b70:	cccccccd 	.word	0xcccccccd
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d101      	bne.n	8000b98 <HAL_DMA_Start_IT+0x20>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e04b      	b.n	8000c30 <HAL_DMA_Start_IT+0xb8>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d13a      	bne.n	8000c22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f000 f9eb 	bl	8000fac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d008      	beq.n	8000bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 020e 	orr.w	r2, r2, #14
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e00f      	b.n	8000c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0204 	bic.w	r2, r2, #4
 8000bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 020a 	orr.w	r2, r2, #10
 8000c0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e005      	b.n	8000c2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d008      	beq.n	8000c62 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2204      	movs	r2, #4
 8000c54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e020      	b.n	8000ca4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 020e 	bic.w	r2, r2, #14
 8000c70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d005      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e051      	b.n	8000d78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 020e 	bic.w	r2, r2, #14
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <HAL_DMA_Abort_IT+0xd4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d029      	beq.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <HAL_DMA_Abort_IT+0xd8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d022      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x9e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <HAL_DMA_Abort_IT+0xdc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01a      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x98>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1e      	ldr	r2, [pc, #120]	@ (8000d90 <HAL_DMA_Abort_IT+0xe0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d012      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x92>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	@ (8000d94 <HAL_DMA_Abort_IT+0xe4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00a      	beq.n	8000d3c <HAL_DMA_Abort_IT+0x8c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <HAL_DMA_Abort_IT+0xe8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d102      	bne.n	8000d36 <HAL_DMA_Abort_IT+0x86>
 8000d30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d34:	e00e      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d3a:	e00b      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d40:	e008      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	e005      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d4c:	e002      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e000      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d52:	2301      	movs	r3, #1
 8000d54:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <HAL_DMA_Abort_IT+0xec>)
 8000d56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4798      	blx	r3
    } 
  }
  return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020008 	.word	0x40020008
 8000d88:	4002001c 	.word	0x4002001c
 8000d8c:	40020030 	.word	0x40020030
 8000d90:	40020044 	.word	0x40020044
 8000d94:	40020058 	.word	0x40020058
 8000d98:	4002006c 	.word	0x4002006c
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d04f      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d04a      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a66      	ldr	r2, [pc, #408]	@ (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d029      	beq.n	8000e4e <HAL_DMA_IRQHandler+0xae>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a65      	ldr	r2, [pc, #404]	@ (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d022      	beq.n	8000e4a <HAL_DMA_IRQHandler+0xaa>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a63      	ldr	r2, [pc, #396]	@ (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0xa4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a62      	ldr	r2, [pc, #392]	@ (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_DMA_IRQHandler+0x9e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a60      	ldr	r2, [pc, #384]	@ (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00a      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x98>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5f      	ldr	r2, [pc, #380]	@ (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d102      	bne.n	8000e32 <HAL_DMA_IRQHandler+0x92>
 8000e2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e36:	e00b      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e3c:	e008      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e42:	e005      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	e002      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	2340      	movs	r3, #64	@ 0x40
 8000e4c:	e000      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4a55      	ldr	r2, [pc, #340]	@ (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000e52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8094 	beq.w	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e66:	e08e      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d056      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d051      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 020a 	bic.w	r2, r2, #10
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a38      	ldr	r2, [pc, #224]	@ (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d029      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x166>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a37      	ldr	r2, [pc, #220]	@ (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d022      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x162>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a35      	ldr	r2, [pc, #212]	@ (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x15c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a34      	ldr	r2, [pc, #208]	@ (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d012      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x156>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a32      	ldr	r2, [pc, #200]	@ (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x150>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a31      	ldr	r2, [pc, #196]	@ (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <HAL_DMA_IRQHandler+0x14a>
 8000ee4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ee8:	e00e      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eee:	e00b      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef4:	e008      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efa:	e005      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f00:	e002      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f02:	2320      	movs	r3, #32
 8000f04:	e000      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f06:	2302      	movs	r3, #2
 8000f08:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000f0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d034      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f24:	e02f      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d028      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020e 	bic.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	4798      	blx	r3
    }
  }
  return;
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
}
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020008 	.word	0x40020008
 8000f94:	4002001c 	.word	0x4002001c
 8000f98:	40020030 	.word	0x40020030
 8000f9c:	40020044 	.word	0x40020044
 8000fa0:	40020058 	.word	0x40020058
 8000fa4:	4002006c 	.word	0x4002006c
 8000fa8:	40020000 	.word	0x40020000

08000fac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d108      	bne.n	8000fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fea:	e007      	b.n	8000ffc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	@ 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e169      	b.n	80012f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8158 	bne.w	80012ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a9a      	ldr	r2, [pc, #616]	@ (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d05e      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001044:	4a98      	ldr	r2, [pc, #608]	@ (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d875      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800104a:	4a98      	ldr	r2, [pc, #608]	@ (80012ac <HAL_GPIO_Init+0x2a4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d058      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001050:	4a96      	ldr	r2, [pc, #600]	@ (80012ac <HAL_GPIO_Init+0x2a4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d86f      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001056:	4a96      	ldr	r2, [pc, #600]	@ (80012b0 <HAL_GPIO_Init+0x2a8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 800105c:	4a94      	ldr	r2, [pc, #592]	@ (80012b0 <HAL_GPIO_Init+0x2a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d869      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001062:	4a94      	ldr	r2, [pc, #592]	@ (80012b4 <HAL_GPIO_Init+0x2ac>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04c      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001068:	4a92      	ldr	r2, [pc, #584]	@ (80012b4 <HAL_GPIO_Init+0x2ac>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d863      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800106e:	4a92      	ldr	r2, [pc, #584]	@ (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001074:	4a90      	ldr	r2, [pc, #576]	@ (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d85d      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d82a      	bhi.n	80010d4 <HAL_GPIO_Init+0xcc>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d859      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001082:	a201      	add	r2, pc, #4	@ (adr r2, 8001088 <HAL_GPIO_Init+0x80>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001103 	.word	0x08001103
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010ef 	.word	0x080010ef
 8001094:	08001131 	.word	0x08001131
 8001098:	08001137 	.word	0x08001137
 800109c:	08001137 	.word	0x08001137
 80010a0:	08001137 	.word	0x08001137
 80010a4:	08001137 	.word	0x08001137
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001137 	.word	0x08001137
 80010b0:	08001137 	.word	0x08001137
 80010b4:	08001137 	.word	0x08001137
 80010b8:	08001137 	.word	0x08001137
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001137 	.word	0x08001137
 80010c4:	08001137 	.word	0x08001137
 80010c8:	08001137 	.word	0x08001137
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	4a79      	ldr	r2, [pc, #484]	@ (80012bc <HAL_GPIO_Init+0x2b4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e029      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e024      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01f      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e01a      	b.n	8001138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x130>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	@ 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x13a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	@ 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x14c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x152>
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80b1 	beq.w	80012ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a4c      	ldr	r2, [pc, #304]	@ (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b4a      	ldr	r3, [pc, #296]	@ (80012c0 <HAL_GPIO_Init+0x2b8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a40      	ldr	r2, [pc, #256]	@ (80012c8 <HAL_GPIO_Init+0x2c0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3f      	ldr	r2, [pc, #252]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3e      	ldr	r2, [pc, #248]	@ (80012d0 <HAL_GPIO_Init+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3d      	ldr	r2, [pc, #244]	@ (80012d4 <HAL_GPIO_Init+0x2cc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1e0>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	492f      	ldr	r1, [pc, #188]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	492c      	ldr	r1, [pc, #176]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4928      	ldr	r1, [pc, #160]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4922      	ldr	r1, [pc, #136]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	491e      	ldr	r1, [pc, #120]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4918      	ldr	r1, [pc, #96]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4914      	ldr	r1, [pc, #80]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d021      	beq.n	80012dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	490e      	ldr	r1, [pc, #56]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e021      	b.n	80012ea <HAL_GPIO_Init+0x2e2>
 80012a6:	bf00      	nop
 80012a8:	10320000 	.word	0x10320000
 80012ac:	10310000 	.word	0x10310000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	10210000 	.word	0x10210000
 80012b8:	10120000 	.word	0x10120000
 80012bc:	10110000 	.word	0x10110000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_GPIO_Init+0x304>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4909      	ldr	r1, [pc, #36]	@ (800130c <HAL_GPIO_Init+0x304>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	3301      	adds	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f ae8e 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	372c      	adds	r7, #44	@ 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	611a      	str	r2, [r3, #16]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e272      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001360:	4b92      	ldr	r3, [pc, #584]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b04      	cmp	r3, #4
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800136c:	4b8f      	ldr	r3, [pc, #572]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d112      	bne.n	800139e <HAL_RCC_OscConfig+0x5e>
 8001378:	4b8c      	ldr	r3, [pc, #560]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d06c      	beq.n	800146c <HAL_RCC_OscConfig+0x12c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d168      	bne.n	800146c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e24c      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x76>
 80013a8:	4b80      	ldr	r3, [pc, #512]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a7f      	ldr	r2, [pc, #508]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e02e      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b7b      	ldr	r3, [pc, #492]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7a      	ldr	r2, [pc, #488]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b78      	ldr	r3, [pc, #480]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a77      	ldr	r2, [pc, #476]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0xbc>
 80013e2:	4b72      	ldr	r3, [pc, #456]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a71      	ldr	r2, [pc, #452]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6f      	ldr	r3, [pc, #444]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013fc:	4b6b      	ldr	r3, [pc, #428]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6a      	ldr	r2, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b68      	ldr	r3, [pc, #416]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a67      	ldr	r2, [pc, #412]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fa16 	bl	800084c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fa12 	bl	800084c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e200      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b5d      	ldr	r3, [pc, #372]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xe4>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fa02 	bl	800084c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff f9fe 	bl	800084c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1ec      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x10c>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001486:	4b49      	ldr	r3, [pc, #292]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x18c>
 8001492:	4b46      	ldr	r3, [pc, #280]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x176>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1c0      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4939      	ldr	r1, [pc, #228]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b36      	ldr	r3, [pc, #216]	@ (80015b0 <HAL_RCC_OscConfig+0x270>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff f9b7 	bl	800084c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff f9b3 	bl	800084c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1a1      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4927      	ldr	r1, [pc, #156]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <HAL_RCC_OscConfig+0x270>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff f996 	bl	800084c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff f992 	bl	800084c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e180      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03a      	beq.n	80015c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d019      	beq.n	800158a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <HAL_RCC_OscConfig+0x274>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff f976 	bl	800084c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff f972 	bl	800084c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e160      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f000 face 	bl	8001b24 <RCC_Delay>
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_RCC_OscConfig+0x274>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff f95c 	bl	800084c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001596:	e00f      	b.n	80015b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff f958 	bl	800084c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d908      	bls.n	80015b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e146      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	42420000 	.word	0x42420000
 80015b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b92      	ldr	r3, [pc, #584]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e9      	bne.n	8001598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a6 	beq.w	800171e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b88      	ldr	r3, [pc, #544]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a87      	ldr	r2, [pc, #540]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b82      	ldr	r3, [pc, #520]	@ (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b7f      	ldr	r3, [pc, #508]	@ (8001808 <HAL_RCC_OscConfig+0x4c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7e      	ldr	r2, [pc, #504]	@ (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff f919 	bl	800084c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff f915 	bl	800084c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	@ 0x64
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e103      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b75      	ldr	r3, [pc, #468]	@ (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x312>
 8001644:	4b6f      	ldr	r3, [pc, #444]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e02d      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x334>
 800165a:	4b6a      	ldr	r3, [pc, #424]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a69      	ldr	r2, [pc, #420]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	4b67      	ldr	r3, [pc, #412]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a66      	ldr	r2, [pc, #408]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	e01c      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x356>
 800167c:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a60      	ldr	r2, [pc, #384]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	4b5e      	ldr	r3, [pc, #376]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a5d      	ldr	r2, [pc, #372]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e00b      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001696:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a5a      	ldr	r2, [pc, #360]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a57      	ldr	r2, [pc, #348]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d015      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f8c9 	bl	800084c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f8c5 	bl	800084c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0b1      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ee      	beq.n	80016be <HAL_RCC_OscConfig+0x37e>
 80016e0:	e014      	b.n	800170c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f8b3 	bl	800084c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f8af 	bl	800084c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e09b      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ee      	bne.n	80016ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d105      	bne.n	800171e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a3b      	ldr	r2, [pc, #236]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d061      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d146      	bne.n	80017ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173c:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_RCC_OscConfig+0x4cc>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f883 	bl	800084c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f87f 	bl	800084c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e06d      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001772:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4921      	ldr	r1, [pc, #132]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a19      	ldr	r1, [r3, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	430b      	orrs	r3, r1
 8001796:	491b      	ldr	r1, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_RCC_OscConfig+0x4cc>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff f853 	bl	800084c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff f84f 	bl	800084c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x46a>
 80017c8:	e035      	b.n	8001836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f83c 	bl	800084c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff f838 	bl	800084c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e026      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x498>
 80017f6:	e01e      	b.n	8001836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e019      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
 800180c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_OscConfig+0x500>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0d0      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0207 	bic.w	r2, r3, #7
 800186e:	4965      	ldr	r1, [pc, #404]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a58      	ldr	r2, [pc, #352]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a52      	ldr	r2, [pc, #328]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d040      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e073      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b39      	ldr	r3, [pc, #228]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4936      	ldr	r1, [pc, #216]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7fe ff8a 	bl	800084c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7fe ff86 	bl	800084c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e053      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d210      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 0207 	bic.w	r2, r3, #7
 800197a:	4922      	ldr	r1, [pc, #136]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	@ (8001a10 <HAL_RCC_ClockConfig+0x1cc>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_ClockConfig+0x1d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fee8 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08002ca8 	.word	0x08002ca8
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x94>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x30>
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x36>
 8001a46:	e027      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4a:	613b      	str	r3, [r7, #16]
      break;
 8001a4c:	e027      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x94>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0c5b      	lsrs	r3, r3, #17
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e004      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	613b      	str	r3, [r7, #16]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	613b      	str	r3, [r7, #16]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	693b      	ldr	r3, [r7, #16]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	007a1200 	.word	0x007a1200
 8001ab4:	08002cc0 	.word	0x08002cc0
 8001ab8:	08002cd0 	.word	0x08002cd0
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08002cb8 	.word	0x08002cb8

08001afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0adb      	lsrs	r3, r3, #11
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	@ (8001b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002cb8 	.word	0x08002cb8

08001b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <RCC_Delay+0x34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <RCC_Delay+0x38>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b40:	bf00      	nop
  }
  while (Delay --);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	60fa      	str	r2, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <RCC_Delay+0x1c>
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e042      	b.n	8001bf8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fce2 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	@ 0x24
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 ff79 	bl	8002a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d175      	bne.n	8001d0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_UART_Transmit+0x2c>
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e06e      	b.n	8001d0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2221      	movs	r2, #33	@ 0x21
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3e:	f7fe fe05 	bl	800084c <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c58:	d108      	bne.n	8001c6c <HAL_UART_Transmit+0x6c>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e003      	b.n	8001c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c74:	e02e      	b.n	8001cd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	@ 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fc55 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e03a      	b.n	8001d0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e007      	b.n	8001cc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1cb      	bne.n	8001c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2140      	movs	r1, #64	@ 0x40
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fc21 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e006      	b.n	8001d0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b08c      	sub	sp, #48	@ 0x30
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	4613      	mov	r3, r2
 8001d22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d146      	bne.n	8001dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e03f      	b.n	8001dc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fc46 	bl	80025e4 <UART_Start_Receive_DMA>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d125      	bne.n	8001db2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	330c      	adds	r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	e853 3f00 	ldrex	r3, [r3]
 8001d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d9e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da0:	6a39      	ldr	r1, [r7, #32]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	e841 2300 	strex	r3, r2, [r1]
 8001da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8001db0:	e002      	b.n	8001db8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8001db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dbc:	e000      	b.n	8001dc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3730      	adds	r7, #48	@ 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0ba      	sub	sp, #232	@ 0xe8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10f      	bne.n	8001e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_UART_IRQHandler+0x66>
 8001e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fd7a 	bl	8002920 <UART_Receive_IT>
      return;
 8001e2c:	e25b      	b.n	80022e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80de 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x22c>
 8001e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80d1 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_UART_IRQHandler+0xae>
 8001e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_UART_IRQHandler+0xd2>
 8001e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_UART_IRQHandler+0xf6>
 8001ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d011      	beq.n	8001eee <HAL_UART_IRQHandler+0x126>
 8001eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f043 0208 	orr.w	r2, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 81f2 	beq.w	80022dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_UART_IRQHandler+0x14e>
 8001f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fd05 	bl	8002920 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_UART_IRQHandler+0x17a>
 8001f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d04f      	beq.n	8001fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fc0f 	bl	8002766 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d041      	beq.n	8001fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3314      	adds	r3, #20
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f64:	e853 3f00 	ldrex	r3, [r3]
 8001f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3314      	adds	r3, #20
 8001f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f92:	e841 2300 	strex	r3, r2, [r1]
 8001f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1d9      	bne.n	8001f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d013      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_UART_IRQHandler+0x3e0>)
 8001fb0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe7a 	bl	8000cb0 <HAL_DMA_Abort_IT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd0:	e00e      	b.n	8001ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f9a5 	bl	8002322 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	e00a      	b.n	8001ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9a1 	bl	8002322 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	e006      	b.n	8001ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f99d 	bl	8002322 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001fee:	e175      	b.n	80022dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff0:	bf00      	nop
    return;
 8001ff2:	e173      	b.n	80022dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	f040 814f 	bne.w	800229c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8148 	beq.w	800229c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800200c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8141 	beq.w	800229c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80b6 	beq.w	80021ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800204c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8145 	beq.w	80022e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800205a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800205e:	429a      	cmp	r2, r3
 8002060:	f080 813e 	bcs.w	80022e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800206a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b20      	cmp	r3, #32
 8002074:	f000 8088 	beq.w	8002188 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002082:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002086:	e853 3f00 	ldrex	r3, [r3]
 800208a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800208e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002092:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002096:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020b4:	e841 2300 	strex	r3, r2, [r1]
 80020b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80020bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1d9      	bne.n	8002078 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3314      	adds	r3, #20
 80020ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ce:	e853 3f00 	ldrex	r3, [r3]
 80020d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3314      	adds	r3, #20
 80020e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80020f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020f4:	e841 2300 	strex	r3, r2, [r1]
 80020f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e1      	bne.n	80020c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3314      	adds	r3, #20
 8002106:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800210a:	e853 3f00 	ldrex	r3, [r3]
 800210e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002124:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002126:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800212a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800212c:	e841 2300 	strex	r3, r2, [r1]
 8002130:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e3      	bne.n	8002100 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002150:	e853 3f00 	ldrex	r3, [r3]
 8002154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002158:	f023 0310 	bic.w	r3, r3, #16
 800215c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800216a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800216c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002172:	e841 2300 	strex	r3, r2, [r1]
 8002176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e3      	bne.n	8002146 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fd58 	bl	8000c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002196:	b29b      	uxth	r3, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe f916 	bl	80003d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021a4:	e09c      	b.n	80022e0 <HAL_UART_IRQHandler+0x518>
 80021a6:	bf00      	nop
 80021a8:	0800282b 	.word	0x0800282b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 808e 	beq.w	80022e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8089 	beq.w	80022e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	330c      	adds	r3, #12
 80021d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021dc:	e853 3f00 	ldrex	r3, [r3]
 80021e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80021e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80021f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80021f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021fe:	e841 2300 	strex	r3, r2, [r1]
 8002202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e3      	bne.n	80021d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3314      	adds	r3, #20
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	623b      	str	r3, [r7, #32]
   return(result);
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3314      	adds	r3, #20
 800222a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800222e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e3      	bne.n	800220a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	330c      	adds	r3, #12
 8002256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	e853 3f00 	ldrex	r3, [r3]
 800225e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0310 	bic.w	r3, r3, #16
 8002266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002274:	61fa      	str	r2, [r7, #28]
 8002276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	e841 2300 	strex	r3, r2, [r1]
 8002280:	617b      	str	r3, [r7, #20]
   return(result);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e3      	bne.n	8002250 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800228e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe f89b 	bl	80003d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800229a:	e023      	b.n	80022e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800229c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_UART_IRQHandler+0x4f4>
 80022a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 facc 	bl	8002852 <UART_Transmit_IT>
    return;
 80022ba:	e014      	b.n	80022e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_UART_IRQHandler+0x51e>
 80022c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fb0b 	bl	80028f0 <UART_EndTransmit_IT>
    return;
 80022da:	e004      	b.n	80022e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80022dc:	bf00      	nop
 80022de:	e002      	b.n	80022e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022e0:	bf00      	nop
 80022e2:	e000      	b.n	80022e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022e4:	bf00      	nop
  }
}
 80022e6:	37e8      	adds	r7, #232	@ 0xe8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b09c      	sub	sp, #112	@ 0x70
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d172      	bne.n	8002436 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002352:	2200      	movs	r2, #0
 8002354:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800236c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800236e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002376:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002378:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800237c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e5      	bne.n	8002356 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800239a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80023a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80023ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e5      	bne.n	800238a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3314      	adds	r3, #20
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	e853 3f00 	ldrex	r3, [r3]
 80023cc:	623b      	str	r3, [r7, #32]
   return(result);
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80023d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3314      	adds	r3, #20
 80023dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023de:	633a      	str	r2, [r7, #48]	@ 0x30
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e5      	bne.n	80023be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d119      	bne.n	8002436 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	60fb      	str	r3, [r7, #12]
   return(result);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f023 0310 	bic.w	r3, r3, #16
 8002418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800241a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002422:	61fa      	str	r2, [r7, #28]
 8002424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	617b      	str	r3, [r7, #20]
   return(result);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e5      	bne.n	8002402 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002438:	2200      	movs	r2, #0
 800243a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002446:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002448:	4619      	mov	r1, r3
 800244a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800244c:	f7fd ffc0 	bl	80003d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002450:	e002      	b.n	8002458 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002452:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002454:	f7ff ff53 	bl	80022fe <HAL_UART_RxCpltCallback>
}
 8002458:	bf00      	nop
 800245a:	3770      	adds	r7, #112	@ 0x70
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7fd ffa2 	bl	80003d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800248c:	e002      	b.n	8002494 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff3e 	bl	8002310 <HAL_UART_RxHalfCpltCallback>
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b21      	cmp	r3, #33	@ 0x21
 80024ce:	d108      	bne.n	80024e2 <UART_DMAError+0x46>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f000 f91b 	bl	8002718 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b22      	cmp	r3, #34	@ 0x22
 8002502:	d108      	bne.n	8002516 <UART_DMAError+0x7a>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	f000 f928 	bl	8002766 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002522:	68b8      	ldr	r0, [r7, #8]
 8002524:	f7ff fefd 	bl	8002322 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002540:	e03b      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d037      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe f97f 	bl	800084c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <UART_WaitOnFlagUntilTimeout+0x30>
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e03a      	b.n	80025da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d023      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b80      	cmp	r3, #128	@ 0x80
 8002576:	d020      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b40      	cmp	r3, #64	@ 0x40
 800257c:	d01d      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d116      	bne.n	80025ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8df 	bl	8002766 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2208      	movs	r2, #8
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00f      	b.n	80025da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d0b4      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b098      	sub	sp, #96	@ 0x60
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2222      	movs	r2, #34	@ 0x22
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	4a3e      	ldr	r2, [pc, #248]	@ (800270c <UART_Start_Receive_DMA+0x128>)
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002618:	4a3d      	ldr	r2, [pc, #244]	@ (8002710 <UART_Start_Receive_DMA+0x12c>)
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	4a3c      	ldr	r2, [pc, #240]	@ (8002714 <UART_Start_Receive_DMA+0x130>)
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3304      	adds	r3, #4
 800263c:	4619      	mov	r1, r3
 800263e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f7fe fa98 	bl	8000b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d019      	beq.n	800269a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002686:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002688:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800268c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e5      	bne.n	8002666 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3314      	adds	r3, #20
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3314      	adds	r3, #20
 80026b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e5      	bne.n	800269a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	617b      	str	r3, [r7, #20]
   return(result);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3314      	adds	r3, #20
 80026ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80026ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80026f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	6a39      	ldr	r1, [r7, #32]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e5      	bne.n	80026ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3760      	adds	r7, #96	@ 0x60
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	08002335 	.word	0x08002335
 8002710:	08002461 	.word	0x08002461
 8002714:	0800249d 	.word	0x0800249d

08002718 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	e853 3f00 	ldrex	r3, [r3]
 800272e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	61ba      	str	r2, [r7, #24]
 8002742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	e841 2300 	strex	r3, r2, [r1]
 800274c:	613b      	str	r3, [r7, #16]
   return(result);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e5      	bne.n	8002720 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800275c:	bf00      	nop
 800275e:	3724      	adds	r7, #36	@ 0x24
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002766:	b480      	push	{r7}
 8002768:	b095      	sub	sp, #84	@ 0x54
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800278e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e5      	bne.n	80027a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f023 0310 	bic.w	r3, r3, #16
 80027f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027fe:	61ba      	str	r2, [r7, #24]
 8002800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	613b      	str	r3, [r7, #16]
   return(result);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002820:	bf00      	nop
 8002822:	3754      	adds	r7, #84	@ 0x54
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fd6c 	bl	8002322 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b21      	cmp	r3, #33	@ 0x21
 8002864:	d13e      	bne.n	80028e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800286e:	d114      	bne.n	800289a <UART_Transmit_IT+0x48>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d110      	bne.n	800289a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	1c9a      	adds	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	621a      	str	r2, [r3, #32]
 8002898:	e008      	b.n	80028ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6211      	str	r1, [r2, #32]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10f      	bne.n	80028e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002906:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fceb 	bl	80022ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	@ 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b22      	cmp	r3, #34	@ 0x22
 8002932:	f040 80ae 	bne.w	8002a92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293e:	d117      	bne.n	8002970 <UART_Receive_IT+0x50>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d113      	bne.n	8002970 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	b29a      	uxth	r2, r3
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	1c9a      	adds	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
 800296e:	e026      	b.n	80029be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002982:	d007      	beq.n	8002994 <UART_Receive_IT+0x74>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <UART_Receive_IT+0x82>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e008      	b.n	80029b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4619      	mov	r1, r3
 80029cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d15d      	bne.n	8002a8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0220 	bic.w	r2, r2, #32
 80029e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d135      	bne.n	8002a84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f023 0310 	bic.w	r3, r3, #16
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3e:	623a      	str	r2, [r7, #32]
 8002a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	69f9      	ldr	r1, [r7, #28]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e5      	bne.n	8002a1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d10a      	bne.n	8002a76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fd fca7 	bl	80003d0 <HAL_UARTEx_RxEventCallback>
 8002a82:	e002      	b.n	8002a8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fc3a 	bl	80022fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e002      	b.n	8002a94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3730      	adds	r7, #48	@ 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ad6:	f023 030c 	bic.w	r3, r3, #12
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb0 <UART_SetConfig+0x114>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d103      	bne.n	8002b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b04:	f7fe fffa 	bl	8001afc <HAL_RCC_GetPCLK2Freq>
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	e002      	b.n	8002b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f7fe ffe2 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8002b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009a      	lsls	r2, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <UART_SetConfig+0x118>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	0119      	lsls	r1, r3, #4
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009a      	lsls	r2, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <UART_SetConfig+0x118>)
 8002b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2064      	movs	r0, #100	@ 0x64
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	@ 0x32
 8002b5c:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <UART_SetConfig+0x118>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b68:	4419      	add	r1, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b80:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <UART_SetConfig+0x118>)
 8002b82:	fba3 0302 	umull	r0, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2064      	movs	r0, #100	@ 0x64
 8002b8a:	fb00 f303 	mul.w	r3, r0, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	3332      	adds	r3, #50	@ 0x32
 8002b94:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <UART_SetConfig+0x118>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	440a      	add	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	51eb851f 	.word	0x51eb851f

08002bb8 <memset>:
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4402      	add	r2, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <strstr>:
 8002bc8:	780a      	ldrb	r2, [r1, #0]
 8002bca:	b570      	push	{r4, r5, r6, lr}
 8002bcc:	b96a      	cbnz	r2, 8002bea <strstr+0x22>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d109      	bne.n	8002be8 <strstr+0x20>
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f6      	beq.n	8002bce <strstr+0x6>
 8002be0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002be4:	429e      	cmp	r6, r3
 8002be6:	d0f7      	beq.n	8002bd8 <strstr+0x10>
 8002be8:	3001      	adds	r0, #1
 8002bea:	7803      	ldrb	r3, [r0, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <strstr+0x8>
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	e7ec      	b.n	8002bce <strstr+0x6>

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	4d0c      	ldr	r5, [pc, #48]	@ (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4c0d      	ldr	r4, [pc, #52]	@ (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	f000 f828 	bl	8002c58 <_init>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	4d0a      	ldr	r5, [pc, #40]	@ (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08002cdc 	.word	0x08002cdc
 8002c30:	08002cdc 	.word	0x08002cdc
 8002c34:	08002cdc 	.word	0x08002cdc
 8002c38:	08002ce0 	.word	0x08002ce0

08002c3c <memcpy>:
 8002c3c:	440a      	add	r2, r1
 8002c3e:	4291      	cmp	r1, r2
 8002c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c44:	d100      	bne.n	8002c48 <memcpy+0xc>
 8002c46:	4770      	bx	lr
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c4e:	4291      	cmp	r1, r2
 8002c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c54:	d1f9      	bne.n	8002c4a <memcpy+0xe>
 8002c56:	bd10      	pop	{r4, pc}

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
